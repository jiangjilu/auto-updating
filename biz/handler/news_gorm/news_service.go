// Code generated by hertz generator.

package news_gorm

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jiangjilu/auto-updating/biz/dal/mysql"
	"github.com/jiangjilu/auto-updating/biz/hertz_gen/news_gorm"
	"github.com/jiangjilu/auto-updating/biz/model"
	"github.com/jiangjilu/auto-updating/biz/pack"
)

// UpdateNews .
// @router /v1/news/update/:id [POST]
func UpdateNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req news_gorm.UpdateNewsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(200, &news_gorm.UpdateNewsResponse{Code: news_gorm.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	u := &model.News{}
	u.ID = uint(req.ID)
	u.Cid = req.Cid
	u.Title = req.Title
	u.Content = req.Content
	u.State = int64(req.State)

	if err = mysql.UpdateNews(u); err != nil {
		c.JSON(200, &news_gorm.UpdateNewsResponse{Code: news_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(200, &news_gorm.UpdateNewsResponse{Code: news_gorm.Code_Success})
}

// DeleteNews .
// @router /v1/news/delete/:id [POST]
func DeleteNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req news_gorm.DeleteNewsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &news_gorm.DeleteNewsResponse{Code: news_gorm.Code_ParamInvalid, Msg: err.Error()})
		return
	}
	if err = mysql.DeleteNews(req.ID); err != nil {
		c.JSON(consts.StatusOK, &news_gorm.DeleteNewsResponse{Code: news_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &news_gorm.DeleteNewsResponse{Code: news_gorm.Code_Success})
}

// QueryNews .
// @router /v1/news/query/ [POST]
func QueryNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req news_gorm.QueryNewsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(200, &news_gorm.QueryNewsResponse{Code: news_gorm.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	rowset, total, err := mysql.QueryNews(req.Keyword, req.Page, req.PageSize)
	if err != nil {
		c.JSON(200, &news_gorm.QueryNewsResponse{Code: news_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(200, &news_gorm.QueryNewsResponse{Code: news_gorm.Code_Success, Rowset: pack.Newses(rowset), Totoal: total})
}

// CreateNews .
// @router /v1/news/create/ [POST]
func CreateNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req news_gorm.CreateNewsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(200, &news_gorm.CreateNewsResponse{Code: news_gorm.Code_ParamInvalid, Msg: err.Error()})
		return
	}
	if err = mysql.CreateNews([]*model.News{
		{
			Title:   req.Title,
			State:   int64(req.State),
			Cid:     req.Cid,
			Content: req.Content,
		},
	}); err != nil {
		c.JSON(200, &news_gorm.CreateNewsResponse{Code: news_gorm.Code_DBErr, Msg: err.Error()})
		return
	}

	resp := new(news_gorm.CreateNewsResponse)
	resp.Code = news_gorm.Code_Success
	c.JSON(200, resp)
}
