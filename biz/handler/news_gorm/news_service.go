// Code generated by hertz generator.

package news_gorm

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	news_gorm "github.com/jiangjilu/auto-updating/biz/hertz_gen/news_gorm"
)

// UpdateNews .
// @router /v1/news/update/:id [POST]
func UpdateNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req news_gorm.UpdateNewsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(news_gorm.UpdateNewsResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteNews .
// @router /v1/news/delete/:id [POST]
func DeleteNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req news_gorm.DeleteNewsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(news_gorm.DeleteNewsResponse)

	c.JSON(consts.StatusOK, resp)
}

// QueryNews .
// @router /v1/news/query/ [POST]
func QueryNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req news_gorm.QueryNewsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(news_gorm.QueryNewsResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateNews .
// @router /v1/news/create/ [POST]
func CreateNews(ctx context.Context, c *app.RequestContext) {
	var err error
	var req news_gorm.CreateNewsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(news_gorm.CreateNewsResponse)

	c.JSON(consts.StatusOK, resp)
}
